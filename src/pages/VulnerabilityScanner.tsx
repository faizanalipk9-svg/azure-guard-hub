import { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Search, Shield, AlertTriangle, CheckCircle, Play, Download, Filter } from 'lucide-react';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Progress } from '@/components/ui/progress';

const VulnerabilityScanner = () => {
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);

  const vulnerabilities = [
    {
      id: 'CVE-2024-0001',
      title: 'Critical SQL Injection in Auth Module',
      severity: 'critical',
      cvss: 9.8,
      affected: 'auth-service v2.1.0',
      status: 'open',
      discovered: '2024-01-15',
    },
    {
      id: 'CVE-2024-0002',
      title: 'Cross-Site Scripting (XSS) Vulnerability',
      severity: 'high',
      cvss: 7.5,
      affected: 'web-frontend v3.2.1',
      status: 'patched',
      discovered: '2024-01-14',
    },
    {
      id: 'CVE-2024-0003',
      title: 'Outdated SSL/TLS Configuration',
      severity: 'medium',
      cvss: 5.3,
      affected: 'nginx v1.18.0',
      status: 'mitigated',
      discovered: '2024-01-13',
    },
  ];

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'destructive';
      case 'high': return 'destructive';
      case 'medium': return 'default';
      case 'low': return 'secondary';
      default: return 'outline';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'destructive';
      case 'mitigated': return 'default';
      case 'patched': return 'outline';
      default: return 'secondary';
    }
  };

  const startScan = () => {
    setScanning(true);
    setProgress(0);
    const interval = setInterval(() => {
      setProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          setScanning(false);
          return 100;
        }
        return prev + 10;
      });
    }, 500);
  };

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Vulnerability Scanner</h1>
        <p className="text-muted-foreground">
          Scan systems for security vulnerabilities and CVEs
        </p>
      </div>

      {/* Stats */}
      <div className="grid gap-4 md:grid-cols-4">
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Total Vulnerabilities</p>
                <p className="text-2xl font-bold">247</p>
              </div>
              <Shield className="h-8 w-8 text-muted-foreground" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Critical</p>
                <p className="text-2xl font-bold text-destructive">12</p>
              </div>
              <AlertTriangle className="h-8 w-8 text-destructive" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Patched</p>
                <p className="text-2xl font-bold text-success">189</p>
              </div>
              <CheckCircle className="h-8 w-8 text-success" />
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="pt-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm text-muted-foreground">Last Scan</p>
                <p className="text-sm font-medium">2 hours ago</p>
              </div>
              <Search className="h-8 w-8 text-muted-foreground" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Scan Control */}
      <Card>
        <CardHeader>
          <CardTitle>Start Vulnerability Scan</CardTitle>
          <CardDescription>
            Scan all monitored systems for known vulnerabilities
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <Select defaultValue="all">
              <SelectTrigger className="w-[200px]">
                <SelectValue placeholder="Scan Type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">Full System Scan</SelectItem>
                <SelectItem value="quick">Quick Scan</SelectItem>
                <SelectItem value="custom">Custom Scan</SelectItem>
              </SelectContent>
            </Select>
            <Button onClick={startScan} disabled={scanning}>
              <Play className="h-4 w-4 mr-2" />
              {scanning ? 'Scanning...' : 'Start Scan'}
            </Button>
          </div>
          {scanning && (
            <div className="space-y-2">
              <Progress value={progress} />
              <p className="text-sm text-muted-foreground">
                Scanning: {progress}% complete
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Vulnerabilities List */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Discovered Vulnerabilities</CardTitle>
              <CardDescription>Review and manage security vulnerabilities</CardDescription>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" size="sm">
                <Filter className="h-4 w-4 mr-2" />
                Filter
              </Button>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {vulnerabilities.map((vuln) => (
              <Card key={vuln.id}>
                <CardContent className="pt-6">
                  <div className="flex items-start justify-between">
                    <div className="space-y-2 flex-1">
                      <div className="flex items-center gap-2">
                        <h3 className="font-semibold">{vuln.title}</h3>
                        <Badge variant={getSeverityColor(vuln.severity)}>
                          {vuln.severity.toUpperCase()}
                        </Badge>
                        <Badge variant={getStatusColor(vuln.status)}>
                          {vuln.status}
                        </Badge>
                      </div>
                      <div className="flex items-center gap-4 text-sm text-muted-foreground">
                        <span>CVE: {vuln.id}</span>
                        <span>CVSS: {vuln.cvss}</span>
                        <span>Affected: {vuln.affected}</span>
                        <span>Discovered: {vuln.discovered}</span>
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button variant="outline" size="sm">View Details</Button>
                      {vuln.status === 'open' && (
                        <Button size="sm">Patch Now</Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityScanner;
